const {createLogger, transports, format} = require('winston');
const isObject = require('is-plain-object');
const isEmpty = require('is-empty');


const excludedKeys = ['password', 'Authorization', 'salt', 'access_token'];
const deepRegexReplace = (value, keys) => {
  if (typeof value === 'undefined' || typeof keys === 'undefined') return {};

  if (Array.isArray(value)) {
    for (let i = 0; i < value.length; i = i + 1) {
      value[i] = deepRegexReplace(value[i], keys);
    }
    return value;
  }

  if (!isObject(value)) {
    return value;
  }

  if (typeof keys === 'string') {
    keys = [keys];
  }

  if (!Array.isArray(keys)) {
    return value;
  }

  for (let j = 0; j < keys.length; j++) {
    for (let key in value) {
      if (value.hasOwnProperty(key)) {
        if (new RegExp(keys[j],'i').test(key)) value[key] = '********';
      }
    }
  }

  for (let key in value) {
    if (value.hasOwnProperty(key)) {
      value[key] = deepRegexReplace(value[key], keys);
    }
  }

  return value;
};

let logLevel = 'info';
/*
LogLevels - Priority.
i.e., if it is 2, then it'll transport error, warn and info.
{
  error: 0,
  warn: 1,
  info: 2,
  verbose: 3,
  debug: 4,
  silly: 5
}
 */

//const tsFormat = () => Date.now()
const tsFormat = () => (new Date()).toISOString();

const myFormat = format.printf(({ level, message, timestamp, ...rest }) => {
    let log = { message };
    const data = JSON.parse(JSON.stringify(rest));
    if (!isEmpty(rest)) log.data = data;
    const filter = deepRegexReplace(log, excludedKeys)
    return `${JSON.stringify({time: timestamp, logLevel: level, ...filter})}`;
  });

const logger = createLogger({

    level: logLevel,
    format: format.combine(
      format.json(),
      format.timestamp({
          format: tsFormat
      }),
      format.errors({ stack: true }),
      format.splat(),
      myFormat
    ),
    transports: [
        new transports.Console()
    ]
});

logger.info('SingularKey Logging Started...');

const setLogLevel = (logLevel) =>{
    logger.level = logLevel
}

module.exports = {
    logger,
    setLogLevel
};