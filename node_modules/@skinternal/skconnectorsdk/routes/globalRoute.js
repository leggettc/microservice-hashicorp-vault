/**
 * Created by hiteshkalra on 5/21/18.
 */
const express = require('express'),
  router = express.Router(),
  sdkInfo = require('../package.json'),
  {healthCheck,processPacket} = require('../index')
;

router.get('/', (req, res) => {

  res.status(200).json({name:global.globalListName,version: '',sdkVersion:sdkInfo.version,timestamp:Date.now()});
});

router.get('/hc', (req, res) => {
  const startTime = process.hrtime.bigint()
  healthCheck()
    .then(response => {
      const endTime = process.hrtime.bigint()
      const elapsedTimeMs = Number (endTime - startTime) / 1000000
      res.status(200).json({name:global.globalListName,version: '',sdkVersion:sdkInfo.version,...response,receivedTimestampMs:Number(startTime)/1000,elapsedTimeMs});
    })
    .catch(err => {
      const endTime = process.hrtime.bigint()
      const elapsedTimeMs = Number (endTime - startTime) / 1000000
      res.status(400).json({name:global.globalListName,version: '',sdkVersion:sdkInfo.version,success:false,receivedTimestampMs:Number(startTime)/1000,elapsedTimeMs});
    });
});

router.post('/company/:companyId/connections/:connectionId/capabilities/:capabilityName', (req, res) => {
    const packet = {
        to: req.body.connectorId,
        timestamp: Date.now(),
        protocol: 'action',
        payload: {
            name: req.body.connectorId,
            companyId: `${req.params.companyId}`,
            connectionId: `${req.params.connectionId}`,
            connectorId: req.body.connectorId,
            capabilityName: `${req.params.capabilityName}`,
            properties: {},
            inputs: [],
            respondToUser: req.body.respondToUser,
            parameters: {}
        }
    }

    if(req.body.props){
        Object.keys(req.body.props).forEach(k=>{
            packet.payload.properties[k] = {value:req.body.props[k]}
        })
    }

    processPacket(packet,null,true)
        .then(response=>{
            res.status(200).json(response);

        })
        .catch(err => {
            console.log(err)
            return res.status(400).json(err)
            //res.status(400).json({name:global.globalListName,version: '',sdkVersion:sdkInfo.version,success:false});
        });
});

module.exports = router;