/**
 * Created by hiteshkalra on 5/21/18.
 */

const constants = require('../config/constants');
const redisClient = global.Redis.client;
const OPENID_AUTH_PAGE_EXPIRY = 900;

const OPENID_CODE_EXPIRY = 300;


exports.startSessionRedisOpenIdCode= (key,props,returnProps) => {
    const redisPayload = {...props,createdDate: Date.now()};
    return redisClient.set(constants.redisOpenIdCode  + key, JSON.stringify(redisPayload), 'EX', OPENID_AUTH_PAGE_EXPIRY)
        .then(() => {
            return returnProps;
        });
};

exports.verifySessionRedisCode = (key) => {
    return redisClient.get(constants.redisOpenIdCode  + key)
        .then((info) => JSON.parse(info))
        .catch(err => err);
}

exports.deleteRedisSessionCode = (key) => {
    return global.Redis.del(constants.redisOpenIdCode  + key)
}


exports.startSessionRedisOpenIdRefreshToken= async (userId,key,props,expiresInSeconds,returnProps) => {
    const redisPayload = {...props,createdDate: Date.now()};
    try {
        const setInfo = await redisClient.sadd(constants.redisUserPrefix  + userId,constants.redisOpenIdRefreshToken  + key)
        const keyInfo = await redisClient.set(constants.redisOpenIdRefreshToken  + key, JSON.stringify(redisPayload), 'EX', expiresInSeconds)
        return returnProps
    } catch(err) {
        console.log(err)
        return returnProps
    }
};

exports.verifySessionRedisRefreshToken = (key) => {
    return redisClient.get(constants.redisOpenIdRefreshToken  + key)
        .then((info) => JSON.parse(info))
        .catch(err => err);
}

exports.updateSessionRedisOpenIdAuthPage= (key,props) => {
    let redisPayload = null;
    return redisClient.get(constants.redisOpenIdAuthPageState  + key)
        .then((info) => {
            redisPayload = JSON.parse(info)
            redisPayload = {...redisPayload,...props,updatedDate: Date.now()}
            return redisClient.set(constants.redisOpenIdAuthPageState  + key, JSON.stringify(redisPayload), 'EX', redisPayload.settings && redisPayload.settings.flowTimeoutInSeconds?redisPayload.settings.flowTimeoutInSeconds:OPENID_AUTH_PAGE_EXPIRY)
        })
        .then(() => {
            return redisPayload;
        })
        .catch(err => err);
};

exports.updateInteractionVariables= (key,props) => {
    let redisPayload = null;
    return redisClient.get(constants.redisOpenIdAuthPageState  + key)
        .then((info) => {
            redisPayload = JSON.parse(info)
            if(!redisPayload.variables){
                redisPayload.variables = {}
            }
            redisPayload.variables = {...redisPayload.variables,...props}
            redisPayload.updatedDate = Date.now()
            return redisClient.set(constants.redisOpenIdAuthPageState  + key, JSON.stringify(redisPayload), 'EX', OPENID_AUTH_PAGE_EXPIRY)
        })
        .then(() => {
            return redisPayload;
        })
        .catch(err => err);
};

exports.incrementInteractionVariable= (key,variable,incrementBy) => {
    let redisPayload = null;
    return redisClient.get(constants.redisOpenIdAuthPageState  + key)
        .then((info) => {
            redisPayload = JSON.parse(info)
            if(!redisPayload.variables){
                redisPayload.variables = {}
            }
            if(typeof redisPayload.variables[variable] === 'undefined'){
                redisPayload.variables[variable] = incrementBy
            }else {
                redisPayload.variables[variable] += incrementBy
            }
            redisPayload.updatedDate = Date.now()
            return redisClient.set(constants.redisOpenIdAuthPageState  + key, JSON.stringify(redisPayload), 'EX', OPENID_AUTH_PAGE_EXPIRY)
        })
        .then(() => {
            return redisPayload;
        })
        .catch(err => err);
};