/**
 * Created by hiteshkalra on 9/6/18.
 */


const  _ = require('lodash'),
  constants = require('../../config/constants');

const collectionName = constants.mdsTable;

const getAll = async () => {

  const query = `
    SELECT * FROM ${collectionName} 
    ;
    `;
  try {
    const response = await global.pg.query(query);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return []
    }
    return response.rows.map(k=>{
      return {_id:k._id,...k.data}
    })
  } catch (err) {
    throw err
  }

};

const updatePayload = async (id,payload,returnNew) => {

  payload.updatedDate = Date.now()
  let query
  let queryParams = [`${id}`,`${JSON.stringify({payload})}`]
  if(returnNew){
    query = `
    UPDATE ${collectionName}
    SET data  = $2
    WHERE id = $1
    RETURNING *;
    ;
    `;
  }else {
    query = `
    UPDATE ${collectionName}
    SET data  = $2
    WHERE id = $1
    ;
    `;
  }

  console.log(query)

  try {
    const response = await global.pg.query(query,queryParams);
    if(!returnNew){
      return
    }
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id:response.rows[0]._id,...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }
};


const createRecord = async (id,env,type,payload,tocId) => {

  let queryParams = [`${id}`,`${JSON.stringify({env,type,payload,tocId, createdDate: Date.now()})}`]
  const query = `
    INSERT INTO ${collectionName} (_id,data)
    VALUES($1,$2)
    RETURNING *;
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) && response.rows.length > 0)) {
      return
    }
    return {_id: response.rows[0]._id, ...response.rows[0].data}
  } catch (err) {
    if ((err.message && err.message.indexOf('duplicate key') > -1)) {
      err.code = 11000
      err.errmsg = 'duplicate key error collection'
    }
    throw err
  }

};


const getRecord = async (id) => {

  let queryParams = [`${id}`]
  const query = `
    SELECT * FROM ${collectionName} 
    WHERE _id = $1
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id:response.rows[0]._id,...response.rows[0].data}
  } catch (err) {
    throw err
  }
};



module.exports = {
  getAll,
  updatePayload,
  createRecord,
  getRecord,
};