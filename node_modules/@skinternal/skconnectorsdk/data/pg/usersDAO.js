const constants = require('../../config/constants');

const {serr} = require('../../modules/singularError');
const collectionName = constants.appUsersTable;
const {getRecoveryCodes, filterSensitiveDataFromCredential} = require('../../modules/util');


const getUserByUserId = async (userId,companyId,connectionId) => {
  const queryParams = [`${userId}`,`${companyId}`]

  const query = `
    SELECT * FROM ${collectionName} 
    WHERE data->>'userId' = $1 AND companyId = $2
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    const finalResponse = filterSensitiveDataFromCredential({_id:{username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data})
    return finalResponse
  } catch (err) {
    throw err
  }

}

const incrementVariable = async (userId,companyId,key,value) =>{

  let query
  let queryParams

    queryParams = [`${userId}`,`${companyId}`,value]
    query = `
    UPDATE ${collectionName}
    SET data  = jsonb_set(data, '{variables,${key}}', (COALESCE(data->'variables'->>'${key}','0')::int + $3)::text::jsonb)
    WHERE data->>'userId' = $1 AND companyId = $2
    RETURNING *;
    ;
    `;

  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id:  {username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }
}


const saveVariable = async (userId,companyId,key,value) =>{


  let query
  let queryParams

  queryParams = [`${userId}`,`${companyId}`,`${JSON.stringify({[key]:value})}`]
  query = `
    UPDATE ${collectionName}
    SET data  = jsonb_set(data, '{variables}', (data->'variables') || $3 )
    WHERE data->>'userId' = $1 AND companyId = $2
    RETURNING *;
    ;
    `;

  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id:  {username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }

}

const createCredential = async ({userId, companyId, credential, uniqueProperties,}) => {
  if (credential && !credential.createdDate) {
    credential.createdDate = Date.now();
  }


  let query
  let queryParams = [`${userId}`,`${companyId}`,`${JSON.stringify(credential)}`]
  let nextParamIndex = 4

  let setClause = `data = jsonb_set(data, '{credentials,99999999}', $3)`

  let whereClause
  if (!uniqueProperties){
    whereClause = `data->>'userId' = $1 AND companyId = $2`
  }else {
    queryParams.push(`${JSON.stringify(uniqueProperties)}`)
    whereClause = `data->>'userId' = $1 AND companyId = $2 AND data->'credentials' @> = $${nextParamIndex}`
    nextParamIndex++
  }

  query = `
    UPDATE ${collectionName}
    SET ${setClause}
    WHERE ${whereClause}
    RETURNING *;
    ;
    `;

  console.log(query)

  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      throw new serr('CreadentialExistError', {
        message: 'Credential Already Exists',
      })
    }
    return {_id:  {username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }

};
const saveVariables = async (userId,companyId,props) =>{

  let query
  let queryParams

  queryParams = [`${userId}`,`${companyId}`,`${JSON.stringify(props)}`]
  query = `
    UPDATE ${collectionName}
    SET data  = jsonb_set(data, '{variables}', (data->'variables') || $3 )
    WHERE data->>'userId' = $1 AND companyId = $2
    RETURNING *;
    ;
    `;

  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id:  {username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }

}
const deleteCredential = async ({userId,companyId,credId}) => {

  const findPositionQueryParams = [`${userId}`,`${companyId}`,`${credId}`]
  const findPositionQuery = `
  select position-1 as position from ${collectionName}, jsonb_array_elements(data->'credentials') with ordinality arr(elem, position) 
  WHERE data->>'userId' = $1 AND companyId = $2 AND elem->>'credId' = $3
  ;
`
  try {
    const findResponse = await global.pg.query(findPositionQuery,findPositionQueryParams);
    if(!(findResponse && findResponse.rowCount > 0)){
      return {n:0,ok:0,nModified:0}
    }
    let updateIndex = findResponse.rows[findResponse.rows.length-1].position

    const queryParams = [`${userId}`,`${companyId}`,updateIndex]
    const query = `
    UPDATE ${collectionName}
    SET data  = jsonb_set(data, '{credentials}',(data->'credentials') - ($3)::int) 
    WHERE data->>'userId' = $1 AND companyId = $2
    ;
    `;

    const response = await global.pg.query(query,queryParams);
    if(!(response && response.rowCount === 1)){
      return {n:0,ok:0}
    }
    return {n:1,ok:1,nModified:1}

  } catch (err) {
    console.log(err)
    throw err
  }
}

//TODO
const updateCredential = async ({userId,companyId,credId,status,customFields}) => {



  const findPositionQueryParams = [`${userId}`,`${companyId}`,`${credId}`]
  const findPositionQuery = `
  select position-1 as position from ${collectionName}, jsonb_array_elements(data->'credentials') with ordinality arr(elem, position) 
  WHERE data->>'userId' = $1 AND companyId = $2 AND elem->>'credId' = $3
  ;
`
  try {
    const findResponse = await global.pg.query(findPositionQuery,findPositionQueryParams);
    if(!(findResponse && findResponse.rowCount > 0)){
      return
    }
    let updateIndex = findResponse.rows[findResponse.rows.length-1].position

    let statusSetCommand
    let queryParams = [`${userId}`,`${companyId}`]
    let nextParamIndex = 3
    if(status){
      queryParams.push(`${status}`)
      queryParams = [`${userId}`,`${companyId}`,`${JSON.stringify({status})}`]
      statusSetCommand = `jsonb_set(data, '{credentials,${updateIndex}}',(data->'credentials'->${updateIndex}) || $${nextParamIndex})`
      nextParamIndex++;
    }
    let finalSetCommand
    if(customFields) {
      queryParams.push(`${JSON.stringify(customFields)}`)

      if(statusSetCommand){
        finalSetCommand = `jsonb_set(${statusSetCommand}::jsonb, '{credentials,${updateIndex},details,raw}',(data->'credentials'->${updateIndex}->'details'->'raw') || $${nextParamIndex})`
      } else {
        finalSetCommand = `jsonb_set(data, '{credentials,${updateIndex},details,raw}',(data->'credentials->${updateIndex}->'details'->'raw') || $${nextParamIndex})`
      }
      nextParamIndex++;
    }else {
      finalSetCommand = statusSetCommand
    }

    const query = `
    UPDATE ${collectionName}
    SET data  = ${finalSetCommand}
    WHERE data->>'userId' = $1 AND companyId = $2
    RETURNING *
    ;
    `;

    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id:  {username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }

}

const getUserByAlias = async (companyId,userAlias) => {

  const queryParams = [`${userAlias}`,`${companyId}`]
  const query = `
    SELECT * FROM ${collectionName} 
    WHERE data->>'userAlias' = $1 AND companyId = $2
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    const finalResponse = {_id:{username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
    return finalResponse
  } catch (err) {
    throw err
  }

}

const getUserByConnectionIdEmail = async (companyId,connectionId,email) => {

  const queryParams = [`${email}`,`${companyId}`,`${connectionId}`]
  const query = `
    SELECT * FROM ${collectionName} 
    WHERE data->>'email' = $1 AND companyId = $2 AND connectionId = $3
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    const finalResponse = {_id:{username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
    return finalResponse
  } catch (err) {
    throw err
  }

}


const getUser = async ({companyId,connectionId,username,userId}) => {

  let query
  let queryParams
  if(userId){
    queryParams = [`${userId}`,`${companyId}`]
    query = `
    SELECT * FROM ${collectionName} 
    WHERE data->>'userId' = $1 AND companyId = $2
    ;
    `;
  }else {
    queryParams = [`${username}`,`${companyId}`,`${connectionId}`]
    query = `
    SELECT * FROM ${collectionName} 
    WHERE username = $1 AND companyId = $2 AND connectionId = $3
    ;
    `;
  }
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    const finalResponse = {_id:{username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
    return finalResponse
  } catch (err) {
    throw err
  }
}
//TODO
const updateUser = (userId,companyId,props,passwordHistoryProps) => {
  const user = {userId,'_id.companyId':companyId}
  const update = {
    $set: props
  };

  if(passwordHistoryProps && passwordHistoryProps.previousPassword){
    update.$push = {
      passwordHistory: {
        $each:[passwordHistoryProps.previousPassword],
        $slice: -passwordHistoryProps.totalPreviousPasswordsCount
      }
    }
  }

  return new Promise((resolve,reject) => {
    myCollection.findAndModify({query:user,update,new:true}, (err,response)=>{
      if(err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

const getUserRecoveryCodes = async (userId,companyId) => {




  let query
  let queryParams
    queryParams = [`${userId}`,`${companyId}`]
    query = `
    SELECT * FROM ${collectionName} 
    WHERE data->>'userId' = $1 AND companyId = $2
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    const finalResponse = {_id:{username:response.rows[0].username,companyId: response.rows[0].companyid,connectionId: response.rows[0].connectionid}, ...response.rows[0].data}
    const recoveryCodes = getRecoveryCodes(response);
    return recoveryCodes
  } catch (err) {
    throw err
  }
}

module.exports = {
  getUserByUserId,
  incrementVariable,
  saveVariable,
  createCredential,
  saveVariables,
  deleteCredential,
  updateCredential,
  getUserByConnectionIdEmail,
  getUser,
  updateUser,
  getUserByAlias,
  getUserRecoveryCodes
}