/**
 * Created by hiteshkalra on 8/27/18.
 */


const _ = require('lodash'),
constants = require('../../config/constants');

const collectionName = constants.eventsTable;

const createEvent = async (props) => {
  if(props.details){
    props.details = JSON.stringify(props.details)
  }
  const queryParams = [`${props.eventId}`,`${JSON.stringify({...props, createdDate: Date.now()})}`]
  const query = `
    INSERT INTO ${collectionName} (_id,data)
    VALUES($1,$2)
    RETURNING *;
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) && response.rows.length > 0)) {
      return
    }
    return {_id: response.rows[0]._id, ...response.rows[0].data}
  } catch (err) {
    if ((err.message && err.message.indexOf('duplicate key') > -1)) {
      err.code = 11000
      err.errmsg = 'duplicate key error collection'
    }
    throw err
  }

}

const getEvent = async (eventId) => {
  const queryParams = [`${eventId}`]
  const query = `
    SELECT * FROM ${collectionName} 
    WHERE _id = $1
    ;
    `;
  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    const finalResponse = {_id:response.rows[0]._id,...response.rows[0].data}
    if(finalResponse.details){
      try {
        finalResponse.details = JSON.parse(finalResponse.details)
      }catch(err){
      }
    }
    return finalResponse
  } catch (err) {
    throw err
  }

}

const updateEventStatus = async (eventId,status,updatedBy) => {
  const queryParams = [`${eventId}`,`${JSON.stringify({status,statusUpdatedDate: Date.now(),statusUpdatedBy:updatedBy})}`]
  let query = `
    UPDATE ${collectionName}
    SET data = data || $2
    WHERE _id = $1
    RETURNING *
    ;
    `;

  console.log(query)

  try {
    const response = await global.pg.query(query,queryParams);
    if (!(response && response.rows && Array.isArray(response.rows) &&  response.rows.length >0)){
      return
    }
    return {_id: response.rows[0]._id, ...response.rows[0].data}
  } catch (err) {
    console.log(err)
    throw err
  }

}
module.exports = {
  createEvent,
  getEvent,
  updateEventStatus

}