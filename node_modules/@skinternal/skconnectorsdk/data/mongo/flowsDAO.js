/**
 * Created by hiteshkalra on 7/12/19.
 */

const constants = require('../../config/constants');

const db = global.mongo;
const myCollection = db.collection(constants.flowsTable);



exports.createFlow = (flowId,customerId,companyId,props) => {
  const add = {
    _id:{flowId,companyId},customerId,...props,createdDate: Date.now()
  };
  return new Promise((resolve,reject) => {
    myCollection.insert(add, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};


exports.getFlowsByCompany = (companyId,page,limit) =>{
  if(typeof page != 'number' || isNaN(page)) {
    page = 0
  }
  if(typeof limit != 'number' || isNaN(limit)) {
    limit = 500
  }

  if(limit > 500) {
    limit = 500
  }

  let query = {"_id.companyId":companyId}

  return new Promise((resolve,reject) => {
    const skips = limit * page
    myCollection.find(query).limit(limit).skip(skips, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err)
      }
      resolve(response)
    })
  })
}

exports.getFlow = (companyId,flowId) => {
  return new Promise((resolve, reject) => {
    myCollection.findOne( {_id: {flowId, companyId}}, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};


exports.updateFlow = (companyId,flowId,props) => {

  const update = {
    $set: {...props,updatedDate: Date.now()}
  }

  return new Promise((resolve,reject) => {
    myCollection.findAndModify({query:{_id:{flowId,companyId}},update,new:true}, (err,response)=>{
      if(err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    })
  })
}


exports.deleteFlow = (companyId,flowId) => {
  return new Promise((resolve,reject) => {
    myCollection.remove({_id: {flowId, companyId}}, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};