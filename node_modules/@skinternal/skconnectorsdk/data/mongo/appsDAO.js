/**
 * Created by hiteshkalra on 5/21/18.
 */

constants = require('../../config/constants');

const db = global.mongo;
const myCollection = db.collection(constants.appsTable);

exports.createApp = (appId,companyId,props) => {
  const app = {
    _id: appId, companyId,...props,createdDate: Date.now()
  };
  return new Promise((resolve,reject) => {
    myCollection.insert(app, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

exports.updateApp = (appId,companyId,props) => {

  const update = {
    $set: props
  };

  return new Promise((resolve,reject) => {
    myCollection.findAndModify({query:{_id:appId,companyId},update,new:true}, (err,response)=>{
      if(err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

exports.getAllApps = (companyId) => {
  return new Promise((resolve,reject) => {
    myCollection.find({companyId: companyId}, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

exports.getApp = (companyId,appId) => {
  return new Promise((resolve, reject) => {
    myCollection.findOne( {_id: appId, companyId: companyId}, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};


exports.getAppByApiKey = (type,apiKey) => {
  return new Promise((resolve, reject) => {
    myCollection.findOne({'apiKeys.prod': apiKey}, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });

};


exports.getAppByAppIds = (appIds) => {
  const query = {_id: {
    $in: appIds
  }};
  return new Promise((resolve,reject) => {
    myCollection.find(query, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};


exports.deleteApp = (companyId,appId) => {
  return new Promise((resolve,reject) => {
    myCollection.remove({_id: appId, companyId: companyId}, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};