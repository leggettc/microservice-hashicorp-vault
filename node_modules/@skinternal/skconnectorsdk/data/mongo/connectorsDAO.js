/**
 * Created by hiteshkalra on 6/16/19.
 */

constants = require('../../config/constants');

const db = global.mongoDB;
const myCollection = db.collection(constants.connectorsTable);

const nodeCache = require('node-cache');
const connectorsCache = new nodeCache({ stdTTL: 86400 * 7 });

const invalidateConnectorFromCache = (connectorId) => {
  connectorsCache.del(`${connectorId}`)
}

const invalidateAllConnectorFromCache = () => {
  connectorsCache.flushAll()
}

const getConnector = (connectorId) => {

  let connectorInfo = connectorsCache.get(`${connectorId}`)
  if(connectorInfo){
    return Promise.resolve(connectorInfo)
  }

  const query = {_id: connectorId};

  return new Promise((resolve, reject) => {
    myCollection.findOne(query, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      connectorsCache.set(`${connectorId}`, response)

      resolve(response);
    });
  });
};

const getConnectorList = async (connectorList) => {
  if(!(connectorList && connectorList.length > 0)) {
    return []
  }

  const response = await Promise.all(connectorList.map(async(k) => {
    return getConnector(k);
  }))
  return response.filter(k=>k!= null);
}

module.exports = {
  getConnector,
  getConnectorList,
  invalidateConnectorFromCache,
  invalidateAllConnectorFromCache
}
