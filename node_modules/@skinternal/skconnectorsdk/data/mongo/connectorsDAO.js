/**
 * Created by hiteshkalra on 6/16/19.
 */

constants = require('../../config/constants');

const db = global.mongo;
const myCollection = db.collection(constants.connectorsTable);

const createConnector = (connectorId,customerId,companyId,props) => {
  const add = {
    _id:connectorId,companyId,customerId,...props,createdDate: Date.now()
  };
  return new Promise((resolve,reject) => {
    myCollection.insert(add, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

const getConnector = (connectorId) => {
  return new Promise((resolve, reject) => {
    myCollection.findOne( {_id: connectorId}, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

const getConnectorList = async (connectorList) => {
  if(!(connectorList && connectorList.length > 0)) {
    return []
  }

  const response = await Promise.all(connectorList.map(async(k) => {
    return getConnector(k);
  }))
  return response.filter(k=>k!= null);
}

const getConnectorsByStatus = (companyId,status,page,limit) =>{
  //TODO: Future filter by companyId
  if(typeof page != 'number' || isNaN(page)) {
    page = 0
  }
  if(typeof limit != 'number' || isNaN(limit)) {
    limit = 500
  }

  if(limit > 500) {
    limit = 500
  }

  let query = {"status":status}

  return new Promise((resolve,reject) => {
    const skips = limit * page
    myCollection.find(query).limit(limit).skip(skips, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err)
      }
      resolve(response)
    })
  })
}

module.exports = {
  createConnector,
  getConnector,
  getConnectorList,
  getConnectorsByStatus
}