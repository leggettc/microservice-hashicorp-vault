/**
 * Created by hiteshkalra on 7/12/19.
 */
const constants = require('../../config/constants'),
      _ = require('lodash')
;

const db = global.mongoDB;
const myCollection = db.collection(constants.constructsTable);

const getConstruct = (name,companyId) => {
  const query = {_id: {name, companyId}};

  if(!companyId) {
    companyId = 'singularkey'
  }
  return new Promise((resolve, reject) => {
    myCollection.findOne(query, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

const getConstructsListAdvanced = async (constructsList,recursive) => {
  if(!(constructsList && constructsList.length > 0)) {
    return []
  }

  let properties = {};

  let response = await Promise.all(constructsList.map(async(k) => {
    if (typeof k === 'string') {
      return getConstruct(k);
    } else {
      return getConstruct(k.name,k.companyId);
    }
  }))

  response = response.filter(k=>k != null)

    if (recursive) {

      let tmpResponse = null
      if (response && response.length > 0) {

        tmpResponse = await Promise.all(response.map(async k => {
          let record = {}

          record[k._id.name] = {...k.fields}
          if (k && k.fields && k.fields.items) {
            const tmpResp = await getConstructsList(k.fields.items, false)

            if (tmpResp && tmpResp.length > 0) {
              delete record[k._id.name].properties;
              record[k._id.name].properties = {};
              tmpResp.map(m => {
                if(m) {
                  record[k._id.name].properties[m._id.name] = m.fields
                }
              })
            }
          }
          properties = {...properties,...record}
          return record
        }))
      }
      return properties;
    }

    return response
}

const getConstructsList = async (constructsList,recursive) => {
  if(!(constructsList && constructsList.length > 0)) {
    return []
  }

  let response = await Promise.all(constructsList.map(async(k) => {
    if (typeof k === 'string') {
      return getConstruct(k);
    } else {
      return getConstruct(k.name,k.companyId);
    }
  }))

  if(recursive) {
    let tmpResponse = null
    if(response && response.length > 0) {

      tmpResponse = await Promise.all(response.map(async k=>{
        if (k && k.props && k.props.properties){
          const tmpResp = await getConstructsList(k.props.properties,false)
          return tmpResp
        }
      }))
    }
    if (tmpResponse) {
        response = _.flatten(response.concat(tmpResponse))
    }
  }
  return response;
}

module.exports = {
  getConstruct,
  getConstructsList,
  getConstructsListAdvanced,
}