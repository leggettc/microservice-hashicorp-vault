/**
 * Created by hiteshkalra on 6/16/19.
 */
constants = require('../../config/constants');

const db = global.mongo;
const myCollection = db.collection(constants.connectionsTable);

const createConnection = (connectionId,customerId,companyId,props) => {
  const add = {
    _id:{connectionId,companyId},customerId,...props,createdDate: Date.now()
  };
  return new Promise((resolve,reject) => {
    myCollection.insert(add, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};


const getConnection = (companyId,connectionId) => {
  return new Promise((resolve, reject) => {
    myCollection.findOne( {_id: {connectionId,companyId}}, (err, response) => {
      if (err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    });
  });
};

const getConnectionList = async (companyId,connectionList) => {
  if(!(connectionList && connectionList.length > 0)) {
    return []
  }
  const response = await Promise.all(connectionList.map(async(k) => {
    return getConnection(companyId,k);
  }))
  return response;
}


const getConnectionsByCompany = (companyId,page,limit) =>{
  if(typeof page != 'number' || isNaN(page)) {
    page = 0
  }
  if(typeof limit != 'number' || isNaN(limit)) {
    limit = 500
  }

  if(limit > 500) {
    limit = 500
  }

  let query = {"_id.companyId":companyId}

  return new Promise((resolve,reject) => {
    const skips = limit * page
    myCollection.find(query).limit(limit).skip(skips, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err)
      }
      resolve(response)
    })
  })
}



const updateConnection = (companyId,connectionId,props) => {

  const update = {
    $set: {...props,updatedDate: Date.now()}
  }

  return new Promise((resolve,reject) => {
    myCollection.findAndModify({query:{_id:{connectionId,companyId}},update,new:true}, (err,response)=>{
      if(err) {
        console.log(err);
        return reject(err);
      }
      resolve(response);
    })
  })
}


const deleteConnection = (companyId,connectionId) => {
  return new Promise((resolve,reject) => {
    myCollection.remove({_id: {connectionId, companyId}}, (err,response) =>{
      if(err) {
        console.log (err);
        return reject(err);
      }
      resolve(response);
    });
  });
};


module.exports = {
  createConnection,
  getConnection,
  getConnectionList,
  getConnectionsByCompany,
  updateConnection,
  deleteConnection
}