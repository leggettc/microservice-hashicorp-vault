/**
 * Created by hiteshkalra on 10/17/19.
 */

const connectionsDAO = require('../data/connectionsDAO');
const connectorsDAO = require('../data/connectorsDAO');
const constructsDAO = require('../data/constructsDAO');
const _ = require('lodash')
const nodeCache = require('node-cache');
const companyConnectionCache = new nodeCache({ stdTTL: 86400 * 7 });

exports.invalidateConnectionFromCache = (companyId,connectionId) =>{
  companyConnectionCache.del(`${companyId}_${connectionId}`)
}

exports.invalidateAllConnectionsFromCache = () =>{
  companyConnectionCache.flushAll()
}

exports.getConnectionDetails = async (companyId,connectionId) => {
  let response = await companyConnectionCache.get(`${companyId}_${connectionId}`)
  if (response) {
    console.log("CACHE HIT",companyId,connectionId)
    return response
  }
  console.log("CACHE MISS",companyId,connectionId)
  response = {}

  const connection = await connectionsDAO.getConnection(companyId, connectionId)
  if (!connection) {
    return null
  }

  const connectorsInfo = await connectorsDAO.getConnectorList([connection.connectorId])

  const constructsList = _.flatten(connectorsInfo.map(k => {
    if (k && k.properties) {
      return Object.keys(k.properties)
    }
  })).filter(k => k != null)

  const constructsInfo = await constructsDAO.getConstructsListAdvanced(constructsList, true, false, true)
  const connector = connectorsInfo[0]
  let mergedPropertiesPerConnection = []

  if (connector && connector.properties) {
    const keys = Object.keys(connector.properties);
    let tmpProps = {properties: {}}

    keys.forEach(k => {
      if (constructsInfo[k]) {
        tmpProps.properties[k] = constructsInfo[k]
      }
    })

    const mergedPropsConnector = _.merge({}, tmpProps.properties, connector.properties)

    connector.properties = mergedPropsConnector

    const mergedProps = _.merge({}, tmpProps.properties, connector.properties, connection.properties)

    connection.properties = mergedProps

  }

  connection.connectionId = connection._id.connectionId;
  connection.companyId = connection._id.companyId;
  delete connection._id;

  connector.connectorId = connector._id;
  delete connector._id;

  companyConnectionCache.set(`${companyId}_${connectionId}`, {connection, connector})
  return {connection, connector}

}