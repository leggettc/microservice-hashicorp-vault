const {logger} = require('@skinternal/sk-logger');
const { Pool } = require('pg');
const _ = require('lodash');

global.pg = '';

global.sdkdbConnectingRetry = false;

const initialize = async () =>{
    let {username,password,host,name,port,usePath} = global.secrets.db || {};
    if(usePath && global.partnerSecrets){
        logger.info('db usePath');
        username = _.get(global.partnerSecrets,username,'');
        password = _.get(global.partnerSecrets,password,null);
        host = _.get(global.partnerSecrets,host,'localhost');
        name = _.get(global.partnerSecrets,name,null);
        port = _.get(global.partnerSecrets,port,'5432');
    }
    logger.info('db info to Use',{username,host,name,port,usePath});

    const dbConnectionProps = {user: username, host, database: name, password, port};
    
    const pool = new Pool(dbConnectionProps);
    
    pool.on('error', reconnect);

    try {
        const client = await pool.connect();
        logger.info('Connected to Postgres DB', {host:dbConnectionProps.host});
        client.on('error', reconnect);
        global.pg = client;
    } catch (err) {
        reconnect(err);
    }

    function reconnect(err) {
        if (!global.sdkdbConnectingRetry) {
            global.sdkdbConnectingRetry = true;
            
            global.pg && global.pg.off('error', () => {});
            
            logger.info('db connection retrying', {err});
            setTimeout(async () => {
                try {
                    const client = await pool.connect();
                    global.sdkdbConnectingRetry = false;
                    logger.info('Connected to Postgres DB', {host:dbConnectionProps.host});
                    client.on('error', reconnect);
                    global.pg = client;
                } catch (err) {
                    global.sdkdbConnectingRetry = false;
                    reconnect(err);
                }
            }, 2000);
        }
    }
};

module.exports = {
    initialize,
};