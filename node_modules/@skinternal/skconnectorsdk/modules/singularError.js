/**
 * Created by hiteshkalra on 5/21/18.
 */
const {logger} = require('@skinternal/sk-logger');
const errMsg = JSON.parse(require('fs').readFileSync(__dirname+ '/../config/localizedErrors/en_US_errors.json'));

const localizedMessage = (code, locale) => {
  // For now just one locale file
  if(code === 'validationError'){
    return 'Validation Error'
  } else if (code === 'internalValidationError'){
    return 'Internal Validation Error'
  }

  if(errMsg[code]){
    return errMsg[code]
  }
  if(!(global.localizedErrors && global.localizedErrors['en'] && global.localizedErrors['en'][code])){
    return code
  }
  return global.localizedErrors['en'][code];
};

/**
 * @param {*} err SingularError error object
 * @return messages to be logged
 */
const getDetails = (err) =>{
  let details = {};

  details['serviceName'] = global.globalListName || 'na'

  if (err.stack) {
    details['stack'] = err.stack
  }
  if (err.code) {
    details['code'] = err.code
  }
  if (err.httpResponseCode) {
    details['httpResponseCode'] = err.httpResponseCode
  }
  if (err.message) {
    details['message'] = err.message
  }
  if (err.details) {
    details['details'] = {...err.details}
  }

  if(err.serviceError) {
    details['serviceError'] = err.serviceError;
  }

  return details;
};

/**
 * @function compileErr
 * @param {code} code is SingularError code that is actually a unique string for each capability throught out the system.
 * @param {error} error can be instance of serr or any generic error object.
 * @returns {error} error is an instance of serr
 */
module.exports = compileErr = function(code, error) {
  if(error instanceof serr){ return error }
  const listName = global.globalListName || ''
  let message = listName + " Error"
  if(error && error.message) {
    message = error.message
  } else if(error && error.Description) {
    message = error.Description
  }

  let errorPayload = {message};
  if(error.response && error.response.data) {
    errorPayload['serviceError'] = error.response.data;
  }
  if(error.output){
    errorPayload.output = error.output
  }
  const errorCode = code || 'No Error Code'
  return new serr(errorCode, errorPayload)
}


/**
 * @function serr
 * @param {code} code is SingularError code that is actually a unique string for each capability throught out the system.
 * @param {props} props should containg this : {message, httpResponseCode, details} all are optional
 * @returns {error} error is an instance of serr
 */
module.exports = serr = function(code, props) {
  const {message, httpResponseCode, serviceError, details,output} = props || {}

  this.code = code || 'No Error Code'
  this.stack = (new Error()).stack;

  const standardError = localizedMessage(code);
  if(typeof standardError === 'string'){
    this.message = standardError;
    this.httpResponseCode = httpResponseCode || 400;
  } else {
    if(standardError && standardError.displayMessage){
      this.message = standardError.displayMessage
    }
    this.httpResponseCode = httpResponseCode || standardError.httpResponseCode || 400;
  }
  if(message) {
    this.message = message
  }
  if(!this.message) {
    this.message = 'Internal error. Please try again.'
  }

  if(details) {
    if(Array.isArray(details)){
      this.details = details
    } else {
      this.details = [details];
    }
  }

  if(output){
    this.output = output
  }

  if(serviceError) {
    this.serviceError = serviceError;
  }

  logger.error(this.message, getDetails(this))
  return this;
}
serr.prototype = new Error;

function newSerr(customizedErrors,code, props) {
  const response = new serr(code,props)

  if(customizedErrors && customizedErrors['en'] && customizedErrors['en'].value) {
    const found = customizedErrors['en'].value.find(k=>k.key === code || k.key === response.message)
    if(found && found.value){
      response.message = found.value
    }
  }
  return response
}

function currySerr(f) { // currySerr(f) does the currying transform
  return function(customizedErrors) {
    return function(code, props) {
      return f(customizedErrors,code,props)
    };
  };
}

const curriedSerr = currySerr(newSerr);

module.exports = {
  compileErr,
  serr,
  curriedSerr
};
