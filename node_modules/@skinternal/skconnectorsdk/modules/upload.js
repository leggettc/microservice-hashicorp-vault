const AWS = require('aws-sdk');
const uuidv4 = require('uuid/v4');

const configParams = {};
configParams.region = process.env['SK_AWS_REGION'] ? process.env['SK_AWS_REGION'] : 'us-west-2';
if (process.env['SK_AWS_ACCESS_KEY_ID']) configParams.accessKeyId = process.env['SK_AWS_ACCESS_KEY_ID'];
if (process.env['SK_AWS_ACCESS_KEY_SECRET']) configParams.secretAccessKey = process.env['SK_AWS_ACCESS_KEY_SECRET'];
AWS.config.update(configParams);

const bucketName = global.secrets.aws.bucketName || process.env['SK_AWS_S3_BUCKET_NAME'];

let s3 = new AWS.S3();

/**
 *
 *
 * @param {File|Buffer} file              File object to upload
 * @param {object} data                   Metadata about file upload
 * @param {string} data.companyId         CompanyId of current account
 * @param {string} data.connectionId      ConnectionId of current account
 * @param {string} data.capabilityName    CapabilityName of current connection
 * @param {string} data.name              Name of file, used to get extension from file. The actual filename will be discarded.
 * @param {string} data.ext               Extension of file. Will take priority over `data.name` extension value.
 * @param {string} type                   Type of file object. Values: 'buffer' | 'base64' | ''
 * @return {Promise<{name: string, companyId: string, connectionId: string, capabilityName: string, ext: string, url: string}>} 
 */
function uploadFile(file, data = {}, type = '') {
  const { name, ext, companyId, connectionId, capabilityName } = data;

  const uniqueName = uuidv4();
  const extension = ext || name.split('.').pop() || '';

  const fileName = [uniqueName, extension].filter(Boolean).join('.') || 'file';

  const storageKey = `storage/company/${companyId}/connection/${connectionId}/${capabilityName}/${fileName}`;
  const params = {
    Bucket: bucketName,
    Key: storageKey,
    Body: type === 'buffer' ? file : file.buffer
  };

  return new Promise((resolve, reject) => {
    s3.upload(params, (err) => {
      if (err) return reject(err);

      const url = `${global.secrets.urls.publicHost}/auth/${companyId}/connections/${connectionId}/capabilities/${capabilityName}/upload/${fileName}`;

      resolve({ name: fileName, companyId, connectionId, capabilityName, ext: extension, url });
    });
  });
}

/**
 *
 * @param {*} fileName  File object to upload
 * @param {*} companyId CompanyId of current account
 * @param {*} connectionId connectionId of current account
 * @param {*} capabilityName Name of the capability that stored the file.
 * @returns
 */
function getUploadedFile(fileName, companyId, connectionId, capabilityName) {
  const storageKey = `storage/company/${companyId}/connection/${connectionId}/${capabilityName}/${fileName}`;
  const params = {
    Bucket: bucketName,
    Key: storageKey,
  };

  return s3.getObject(params).promise();
}

module.exports = {
  uploadFile,
  getUploadedFile
};
