/**
 * Created by hiteshkalra on 8/2/19.
 */

const AWS = require('aws-sdk'),
  _ = require('lodash');

global.secrets = {};

exports.initialize = async () => {
  try {
    if (process.env.SK_SECRETS) {
      getSecretsFromEnv();
    } else {
      await getSecretsFromAWS();
    }

    return { message: 'Initializing secrets complete.' };
  } catch (err) {
    throw err;
  }
};

const getSecretsFromEnv = () => {
  try {
    const data = process.env.SK_SECRETS;
    const secrets = JSON.parse(data);
    global.secrets = secrets;

    if(secrets && secrets.partnerEnvKeyName){
      try {
        const partnerSecrets = JSON.parse(process.env[secrets.partnerEnvKeyName]);
        global.partnerSecrets = {[secrets.partnerEnvKeyName]:partnerSecrets}
      }catch(err){
        global.partnerSecrets = process.env;
        console.log('Partner Secrets JSON parse error');
      }
    }else {
      global.partnerSecrets = process.env;
    }
  } catch (error) {
    console.log('error', error);
    throw error;
  }
};

const getSecretsFromAWS = async () => {
  let configParams = {};
  configParams.region = process.env['SK_AWS_REGION']
    ? process.env['SK_AWS_REGION']
    : 'us-west-2';
  if (process.env['SK_AWS_ACCESS_KEY_ID'])
    configParams.accessKeyId = process.env['SK_AWS_ACCESS_KEY_ID'];
  if (process.env['SK_AWS_ACCESS_KEY_SECRET'])
    configParams.secretAccessKey = process.env['SK_AWS_ACCESS_KEY_SECRET'];

  const client = new AWS.SecretsManager(configParams);

  let defaultData = {};

  /*
 pattern for secredId based on NODE_ENV as local, dev, staging
 if no NODE_ENV is passed then local is used.
   singularkey/api/local
   singularkey/api/dev
   singularkey/api/staging
   singularkey/api/prod
 */
  try {
    const secretId = process.env['AWS_SECRET_NAME']
    ? process.env['AWS_SECRET_NAME']
    :  process.env['NODE_ENV']
      ? 'singularkey/api/' + process.env['NODE_ENV']
      : 'singularkey/api/local';

    const data = await client.getSecretValue({ SecretId: secretId }).promise();
    if ('SecretString' in data) {
      try {
        defaultData = JSON.parse(data.SecretString);
        global.secrets = defaultData;
      } catch (err) {
        console.log('Secrets JSON parse error');
      }
    }
  } catch (err) {
    console.log(err);
    throw err;
  }
};
