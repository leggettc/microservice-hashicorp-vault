const { logger } = require('@skinternal/sk-logger');
const v8 = require('v8');

const _ = require('lodash');

let thresholdReached = false;

/**
 * Check if `num1` is less than `num2` within a provided margin of error.
 *
 * @param {number} [num1=0]
 * @param {number} [num2=0]
 * @param {number} [marginOfError=0]
 * @return {boolean}
 */
function lessThan(num1 = 0, num2 = 0, marginOfError = 0) {
  if (num1 < num2 + marginOfError || num1 < num2 - marginOfError) return true;
  return false;
}

/**
 * Monitor heap usage
 *
 * @param {Object} options Options for monitoring
 * @param {number} options.memoryThreshold The threshold after which throtting should be triggered
 * @param {function} options.onThresholdReached The function that gets called when the threshold is reached
 * @param {function} options.onMemoryFreed The function that gets called when memory is freed
 */
function monitorHeap(options) {
  const {
    maxMemoryThreshold = 0.7,
    minMemoryThreshold = 0.4,
    onThresholdReached = f => f,
    onMemoryFreed = f => f,
    log = console.log
  } = options;

  const heapStats = v8.getHeapStatistics();

  const totalHeapSize = heapStats.heap_size_limit;

  const usedHeapSize = heapStats.used_heap_size;

  const memoryUsage = usedHeapSize / totalHeapSize;
  log('heapStats', {memoryUsage,heapStats})

  if (memoryUsage >= maxMemoryThreshold) {
    thresholdReached = true;
    logger.info('Maximum heap threshold reached. Stop receiving events.');

    onThresholdReached({
      totalHeapSize,
      percentage: memoryUsage,
      maxMemoryThreshold,
      minMemoryThreshold
    });
  }

  if (thresholdReached && memoryUsage <= minMemoryThreshold) {
    thresholdReached = false;
    logger.info('Resume receiving events');

    onMemoryFreed({
      totalHeapSize,
      percentage: memoryUsage,
      maxMemoryThreshold,
      minMemoryThreshold
    });
  }
}

module.exports = {
  monitorHeap,
};
